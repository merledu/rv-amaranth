
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v
Parsing SystemVerilog input from `/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v' to AST representation.
Generating RTLIL representation for module `\dff_ram_4x72'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openlane/designs/dff_ram_8x72/src/dff_ram_8x72.v
Parsing SystemVerilog input from `/openlane/designs/dff_ram_8x72/src/dff_ram_8x72.v' to AST representation.
Generating RTLIL representation for module `\dff_ram_8x72'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram_8x72/runs/firstrun/tmp/synthesis/hierarchy.dot'.
Dumping module dff_ram_8x72 to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \dff_ram_8x72
Used module:     \dff_ram_4x72

4.2. Analyzing design hierarchy..
Top module:  \dff_ram_8x72
Used module:     \dff_ram_4x72
Removed 0 unused modules.
Renaming module dff_ram_8x72 to dff_ram_8x72.

5. Executing TRIBUF pass.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \dff_ram_8x72
Used module:     \dff_ram_4x72

6.2. Analyzing design hierarchy..
Top module:  \dff_ram_8x72
Used module:     \dff_ram_4x72
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/dff_ram_8x72/src/dff_ram_8x72.v:41$24 in module dff_ram_8x72.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3 in module dff_ram_4x72.
Removed a total of 0 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 7 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dff_ram_8x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_8x72.v:41$24'.
     1/1: $1\rdata[71:0]
Creating decoders for process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
     1/10: $2$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$20
     2/10: $2$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_DATA[71:0]$19
     3/10: $2$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_ADDR[1:0]$18
     4/10: $1$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$13
     5/10: $1$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_DATA[71:0]$12
     6/10: $1$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_ADDR[1:0]$11
     7/10: $1$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$16
     8/10: $1$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_DATA[71:0]$15
     9/10: $1$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_ADDR[1:0]$14
    10/10: $0\rdata[71:0]

14. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dff_ram_8x72.\rdata' from process `\dff_ram_8x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_8x72.v:41$24'.

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dff_ram_4x72.\rdata' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_ADDR' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_DATA' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_ADDR' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_DATA' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$76' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$77' with positive edge clock.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\dff_ram_8x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_8x72.v:41$24'.
Removing empty process `dff_ram_8x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_8x72.v:41$24'.
Found and cleaned up 2 empty switches in `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
Removing empty process `dff_ram_4x72.$proc$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:14$3'.
Cleaned up 3 empty switches.

18. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_8x72...
Checking module dff_ram_4x72...
Found and reported 0 problems.

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.
<suppressed ~2 debug messages>
Optimizing module dff_ram_4x72.
<suppressed ~14 debug messages>

20. Executing FLATTEN pass (flatten design).
Deleting now unused module dff_ram_4x72.
<suppressed ~2 debug messages>

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.
<suppressed ~11 debug messages>

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 17 unused cells and 84 unused wires.
<suppressed ~20 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\instance_1.$procmux$33.
    dead port 1/2 on $mux $flatten\instance_1.$procmux$39.
    dead port 1/2 on $mux $flatten\instance_1.$procmux$45.
    dead port 2/2 on $mux $flatten\instance_2.$procmux$33.
    dead port 2/2 on $mux $flatten\instance_2.$procmux$39.
    dead port 2/2 on $mux $flatten\instance_2.$procmux$45.
Removed 6 multiplexer ports.
<suppressed ~15 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
    Consolidated identical input bits for $mux cell $flatten\instance_1.$procmux$57:
      Old ports: A=72'000000000000000000000000000000000000000000000000000000000000000000000000, B=72'111111111111111111111111111111111111111111111111111111111111111111111111, Y=$flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9
      New ports: A=1'0, B=1'1, Y=$flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0]
      New connections: $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [71:1] = { $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] }
    Consolidated identical input bits for $mux cell $flatten\instance_2.$procmux$31:
      Old ports: A=72'111111111111111111111111111111111111111111111111111111111111111111111111, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$flatten\instance_2.$procmux$31_Y
      New ports: A=1'1, B=1'0, Y=$flatten\instance_2.$procmux$31_Y [0]
      New connections: $flatten\instance_2.$procmux$31_Y [71:1] = { $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] $flatten\instance_2.$procmux$31_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\instance_1.$procmux$31:
      Old ports: A=72'111111111111111111111111111111111111111111111111111111111111111111111111, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$flatten\instance_1.$procmux$31_Y
      New ports: A=1'1, B=1'0, Y=$flatten\instance_1.$procmux$31_Y [0]
      New connections: $flatten\instance_1.$procmux$31_Y [71:1] = { $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] $flatten\instance_1.$procmux$31_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\instance_2.$procmux$57:
      Old ports: A=72'111111111111111111111111111111111111111111111111111111111111111111111111, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9
      New ports: A=1'1, B=1'0, Y=$flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0]
      New connections: $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [71:1] = { $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] }
  Optimizing cells in module \dff_ram_8x72.
    Consolidated identical input bits for $mux cell $flatten\instance_1.$procmux$48:
      Old ports: A=$flatten\instance_1.$2$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$20, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6
      New ports: A=$flatten\instance_1.$procmux$31_Y [0], B=1'0, Y=$flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0]
      New connections: $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [71:1] = { $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_1.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] }
    Consolidated identical input bits for $mux cell $flatten\instance_2.$procmux$48:
      Old ports: A=72'000000000000000000000000000000000000000000000000000000000000000000000000, B=$flatten\instance_2.$2$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$20, Y=$flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6
      New ports: A=1'0, B=$flatten\instance_2.$procmux$31_Y [0], Y=$flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0]
      New connections: $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [71:1] = { $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $flatten\instance_2.$0$memwr$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] }
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 6 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

23.9. Rerunning OPT passes. (Maybe there is more to do..)

23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

23.13. Executing OPT_DFF pass (perform DFF optimizations).

23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

23.16. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\instance_2.$procdff$71 ($dff) from module dff_ram_8x72 (D = $flatten\instance_2.$memrd$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:22$21_DATA, Q = \instance_2.rdata).
Adding EN signal on $flatten\instance_1.$procdff$71 ($dff) from module dff_ram_8x72 (D = $flatten\instance_1.$memrd$\data$/openlane/designs/dff_ram_8x72/src/dff_ram_4x72.v:22$21_DATA, Q = \instance_1.rdata).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dff_ram_8x72:
  created 0 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

31.9. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing dff_ram_8x72.instance_1.data write port 0.
  Analyzing dff_ram_8x72.instance_1.data write port 1.
  Analyzing dff_ram_8x72.instance_2.data write port 0.
  Analyzing dff_ram_8x72.instance_2.data write port 1.

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\instance_1.data'[0] in module `\dff_ram_8x72': no output FF found.
Checking read port `\instance_2.data'[0] in module `\dff_ram_8x72': no output FF found.
Checking read port address `\instance_1.data'[0] in module `\dff_ram_8x72': no address FF found.
Checking read port address `\instance_2.data'[0] in module `\dff_ram_8x72': no address FF found.

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory dff_ram_8x72.instance_1.data by address:
  Merging ports 0, 1 (address \address [1:0]).
Consolidating write ports of memory dff_ram_8x72.instance_2.data by address:
  Merging ports 0, 1 (address \address [1:0]).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.
<suppressed ~10 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \instance_1.data in module \dff_ram_8x72:
  created 4 $dff cells and 0 static cells of width 72.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 4 write mux blocks.
Mapping memory \instance_2.data in module \dff_ram_8x72:
  created 4 $dff cells and 0 static cells of width 72.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 4 write mux blocks.

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.
<suppressed ~4 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

36.10. Rerunning OPT passes. (Maybe there is more to do..)

36.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

36.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

36.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

36.14. Executing OPT_SHARE pass.

36.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\instance_2.data[3]$155 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$97, Q = \instance_2.data[3]).
Adding EN signal on $memory\instance_2.data[2]$153 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$97, Q = \instance_2.data[2]).
Adding EN signal on $memory\instance_2.data[1]$151 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$97, Q = \instance_2.data[1]).
Adding EN signal on $memory\instance_2.data[0]$149 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$97, Q = \instance_2.data[0]).
Adding EN signal on $memory\instance_1.data[3]$106 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$93, Q = \instance_1.data[3]).
Adding EN signal on $memory\instance_1.data[2]$104 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$93, Q = \instance_1.data[2]).
Adding EN signal on $memory\instance_1.data[1]$102 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$93, Q = \instance_1.data[1]).
Adding EN signal on $memory\instance_1.data[0]$100 ($dff) from module dff_ram_8x72 (D = $auto$rtlil.cc:2558:Mux$93, Q = \instance_1.data[0]).

36.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

36.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

36.18. Rerunning OPT passes. (Maybe there is more to do..)

36.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

36.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

36.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

36.22. Executing OPT_SHARE pass.

36.23. Executing OPT_DFF pass (perform DFF optimizations).

36.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

36.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

36.26. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~114 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\dff_ram_8x72' to `<abc-temp-dir>/input.blif'..
Extracted 670 gates and 1467 wires to a netlist network with 796 inputs and 370 outputs.

39.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               MUX cells:      648
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               AND cells:        4
ABC RESULTS:                OR cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:            ANDNOT cells:        7
ABC RESULTS:        internal signals:      301
ABC RESULTS:           input signals:      796
ABC RESULTS:          output signals:      370
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.
<suppressed ~216 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 2 unused cells and 900 unused wires.
<suppressed ~3 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \dff_ram_8x72

41.2. Analyzing design hierarchy..
Top module:  \dff_ram_8x72
Removed 0 unused modules.

42. Printing statistics.

=== dff_ram_8x72 ===

   Number of wires:                619
   Number of wire bits:           1759
   Number of public wires:          27
   Number of public wire bits:    1167
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1384
     $_ANDNOT_                       7
     $_AND_                          4
     $_DFFE_PP_                    720
     $_MUX_                        648
     $_NAND_                         1
     $_ORNOT_                        3
     $_OR_                           1

43. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_8x72...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram_8x72/runs/firstrun/tmp/synthesis/post_techmap.dot'.
Dumping module dff_ram_8x72 to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_8x72..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_8x72.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_8x72'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_8x72.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 0 unused cells and 12 unused wires.
<suppressed ~12 debug messages>

48. Printing statistics.

=== dff_ram_8x72 ===

   Number of wires:                607
   Number of wire bits:           1461
   Number of public wires:          15
   Number of public wire bits:     869
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1384
     $_ANDNOT_                       7
     $_AND_                          4
     $_DFFE_PP_                    720
     $_MUX_                        648
     $_NAND_                         1
     $_ORNOT_                        3
     $_OR_                           1

mapping tbuf

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dff_ram_8x72':
  mapped 720 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

54. Printing statistics.

=== dff_ram_8x72 ===

   Number of wires:               1327
   Number of wire bits:           2181
   Number of public wires:          15
   Number of public wire bits:     869
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2104
     $_ANDNOT_                       7
     $_AND_                          4
     $_MUX_                       1368
     $_NAND_                         1
     $_ORNOT_                        3
     $_OR_                           1
     sky130_fd_sc_hd__dfxtp_2      720

[INFO]: USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\dff_ram_8x72' to `/tmp/yosys-abc-EJAIUM/input.blif'..
Extracted 1384 gates and 2180 wires to a netlist network with 796 inputs and 792 outputs.

55.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-EJAIUM/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-EJAIUM/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-EJAIUM/input.blif 
ABC: + read_lib -w /openlane/designs/dff_ram_8x72/runs/firstrun/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.15 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/dff_ram_8x72/runs/firstrun/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.21 sec
ABC: Memory =    9.54 MB. Time =     0.21 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/dff_ram_8x72/runs/firstrun/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/dff_ram_8x72/runs/firstrun/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (1583.46 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   2016 ( 45.9 %)   Cap = 13.2 ff ( 15.1 %)   Area =    17352.89 ( 46.9 %)   Delay =  2253.13 ps  ( 24.1 %)               
ABC: Path  0 --       5 : 0    7 pi                      A =   0.00  Df =  48.7  -26.9 ps  S =  73.4 ps  Cin =  0.0 ff  Cout =  14.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1742 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 289.8 -110.4 ps  S = 264.8 ps  Cin =  2.1 ff  Cout =  21.9 ff  Cmax = 130.0 ff  G =  999  
ABC: Path  2 --    1749 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 727.0 -275.4 ps  S = 499.4 ps  Cin =  2.1 ff  Cout =  42.5 ff  Cmax = 130.0 ff  G = 1921  
ABC: Path  3 --    3452 : 3    1 sky130_fd_sc_hd__and3_2 A =   7.51  Df = 995.0 -301.2 ps  S =  48.2 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 309.5 ff  G =  141  
ABC: Path  4 --    3453 : 1    9 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1229.8 -376.5 ps  S = 266.1 ps  Cin =  2.1 ff  Cout =  22.0 ff  Cmax = 130.0 ff  G = 1005  
ABC: Path  5 --    3454 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1596.0 -501.5 ps  S = 396.4 ps  Cin =  2.1 ff  Cout =  33.5 ff  Cmax = 130.0 ff  G = 1528  
ABC: Path  6 --    3455 : 3    1 sky130_fd_sc_hd__mux2_2 A =  11.26  Df =1932.3 -335.6 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  7 --    3456 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =2253.1 -437.6 ps  S = 396.5 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi4 (\address [0]).  End-point = po720 ($auto$rtlil.cc:2669:MuxGate$3624).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  796/  792  lat =    0  nd =  2016  edge =   4625  area =17348.60  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-EJAIUM/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      144
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      936
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      925
ABC RESULTS:        internal signals:      592
ABC RESULTS:           input signals:      796
ABC RESULTS:          output signals:      792
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_8x72..
Removed 0 unused cells and 2180 unused wires.
<suppressed ~1 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).

61. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_8x72...
Warning: Wire dff_ram_8x72.\rdata [71] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [70] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [69] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [68] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [67] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [66] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [65] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [64] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [63] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [62] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [61] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [60] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [59] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [58] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [57] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [56] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [55] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [54] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [53] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [52] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [51] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [50] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [49] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [48] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [47] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [46] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [45] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [44] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [43] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [42] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [41] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [40] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [39] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [38] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [37] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [36] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [35] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [34] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [33] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [32] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [31] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [30] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [29] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [28] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [27] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [26] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [25] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [24] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [23] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [22] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [21] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [20] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [19] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [18] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [17] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [16] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [15] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [14] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [13] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [12] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [11] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [10] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [9] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [8] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [7] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [6] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [5] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [4] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [3] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [2] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [1] is used but has no driver.
Warning: Wire dff_ram_8x72.\rdata [0] is used but has no driver.
Found and reported 72 problems.

62. Printing statistics.

=== dff_ram_8x72 ===

   Number of wires:               2669
   Number of wire bits:           2813
   Number of public wires:         725
   Number of public wire bits:     869
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2736
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__buf_1        925
     sky130_fd_sc_hd__dfxtp_2      720
     sky130_fd_sc_hd__mux2_2       936
     sky130_fd_sc_hd__mux4_2       144
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__nor2_2         1
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__or3b_2         1

   Chip area for module '\dff_ram_8x72': 32667.580800

63. Executing Verilog backend.
Dumping module `\dff_ram_8x72'.

64. Executing JSON backend.

Warnings: 72 unique messages, 72 total
End of script. Logfile hash: c249d9dd21, CPU: user 1.74s system 0.06s, MEM: 35.93 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 72% 2x abc (4 sec), 5% 19x opt_expr (0 sec), ...
