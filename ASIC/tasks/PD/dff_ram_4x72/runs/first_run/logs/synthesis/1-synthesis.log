
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v
Parsing SystemVerilog input from `/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v' to AST representation.
Generating RTLIL representation for module `\dff_ram_4x72'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram_4x72/runs/first_run/tmp/synthesis/hierarchy.dot'.
Dumping module dff_ram_4x72 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \dff_ram_4x72

3.2. Analyzing design hierarchy..
Top module:  \dff_ram_4x72
Removed 0 unused modules.
Renaming module dff_ram_4x72 to dff_ram_4x72.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \dff_ram_4x72

5.2. Analyzing design hierarchy..
Top module:  \dff_ram_4x72
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3 in module dff_ram_4x72.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
     1/10: $2$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$20
     2/10: $2$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_DATA[71:0]$19
     3/10: $2$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_ADDR[1:0]$18
     4/10: $1$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$13
     5/10: $1$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_DATA[71:0]$12
     6/10: $1$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_ADDR[1:0]$11
     7/10: $1$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$16
     8/10: $1$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_DATA[71:0]$15
     9/10: $1$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_ADDR[1:0]$14
    10/10: $0\rdata[71:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dff_ram_4x72.\rdata' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$65' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_ADDR' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$66' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_DATA' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$67' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$68' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_ADDR' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$69' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_DATA' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\dff_ram_4x72.$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN' using process `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
  created $dff cell `$procdff$71' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
Removing empty process `dff_ram_4x72.$proc$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:14$3'.
Cleaned up 2 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_4x72...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~14 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 8 unused cells and 38 unused wires.
<suppressed ~9 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$27.
    dead port 1/2 on $mux $procmux$33.
    dead port 1/2 on $mux $procmux$39.
Removed 3 multiplexer ports.
<suppressed ~7 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
    Consolidated identical input bits for $mux cell $procmux$25:
      Old ports: A=72'111111111111111111111111111111111111111111111111111111111111111111111111, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$procmux$25_Y
      New ports: A=1'1, B=1'0, Y=$procmux$25_Y [0]
      New connections: $procmux$25_Y [71:1] = { $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] $procmux$25_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$51:
      Old ports: A=72'000000000000000000000000000000000000000000000000000000000000000000000000, B=72'111111111111111111111111111111111111111111111111111111111111111111111111, Y=$0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9
      New ports: A=1'0, B=1'1, Y=$0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0]
      New connections: $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [71:1] = { $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:26$2_EN[71:0]$9 [0] }
  Optimizing cells in module \dff_ram_4x72.
    Consolidated identical input bits for $mux cell $procmux$42:
      Old ports: A=$2$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$20, B=72'000000000000000000000000000000000000000000000000000000000000000000000000, Y=$0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6
      New ports: A=$procmux$25_Y [0], B=1'0, Y=$0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0]
      New connections: $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [71:1] = { $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] $0$memwr$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:18$1_EN[71:0]$6 [0] }
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 3 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$65 ($dff) from module dff_ram_4x72 (D = $memrd$\data$/openlane/designs/dff_ram_4x72/src/dff_ram_4x72.v:22$21_DATA, Q = \rdata).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dff_ram_4x72:
  created 0 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing dff_ram_4x72.data write port 0.
  Analyzing dff_ram_4x72.data write port 1.

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\data'[0] in module `\dff_ram_4x72': no output FF found.
Checking read port address `\data'[0] in module `\dff_ram_4x72': no address FF found.

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory dff_ram_4x72.data by address:
  Merging ports 0, 1 (address \address).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~5 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \data in module \dff_ram_4x72:
  created 4 $dff cells and 0 static cells of width 72.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 4 write mux blocks.

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~4 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\data[3]$91 ($dff) from module dff_ram_4x72 (D = $auto$rtlil.cc:2558:Mux$82, Q = \data[3]).
Adding EN signal on $memory\data[2]$89 ($dff) from module dff_ram_4x72 (D = $auto$rtlil.cc:2558:Mux$82, Q = \data[2]).
Adding EN signal on $memory\data[1]$87 ($dff) from module dff_ram_4x72 (D = $auto$rtlil.cc:2558:Mux$82, Q = \data[1]).
Adding EN signal on $memory\data[0]$85 ($dff) from module dff_ram_4x72 (D = $auto$rtlil.cc:2558:Mux$82, Q = \data[0]).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~97 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\dff_ram_4x72' to `<abc-temp-dir>/input.blif'..
Extracted 303 gates and 668 wires to a netlist network with 364 inputs and 149 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               MUX cells:      288
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:                OR cells:        1
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:        internal signals:      155
ABC RESULTS:           input signals:      364
ABC RESULTS:          output signals:      149
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.
<suppressed ~144 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 2 unused cells and 456 unused wires.
<suppressed ~3 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \dff_ram_4x72

40.2. Analyzing design hierarchy..
Top module:  \dff_ram_4x72
Removed 0 unused modules.

41. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:                237
   Number of wire bits:            735
   Number of public wires:          10
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                658
     $_ANDNOT_                       5
     $_DFFE_PP_                    360
     $_MUX_                        288
     $_NAND_                         1
     $_ORNOT_                        3
     $_OR_                           1

42. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_4x72...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram_4x72/runs/first_run/tmp/synthesis/post_techmap.dot'.
Dumping module dff_ram_4x72 to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram_4x72..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram_4x72.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram_4x72'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram_4x72.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..

47. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:                237
   Number of wire bits:            735
   Number of public wires:          10
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                658
     $_ANDNOT_                       5
     $_DFFE_PP_                    360
     $_MUX_                        288
     $_NAND_                         1
     $_ORNOT_                        3
     $_OR_                           1

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/mmuddassir/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dff_ram_4x72':
  mapped 360 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:                597
   Number of wire bits:           1095
   Number of public wires:          10
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1018
     $_ANDNOT_                       5
     $_MUX_                        648
     $_NAND_                         1
     $_ORNOT_                        3
     $_OR_                           1
     sky130_fd_sc_hd__dfxtp_2      360

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\dff_ram_4x72' to `/tmp/yosys-abc-pscBM5/input.blif'..
Extracted 658 gates and 1094 wires to a netlist network with 436 inputs and 360 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-pscBM5/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-pscBM5/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-pscBM5/input.blif 
ABC: + read_lib -w /openlane/designs/dff_ram_4x72/runs/first_run/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.15 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/dff_ram_4x72/runs/first_run/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.21 sec
ABC: Memory =    9.54 MB. Time =     0.21 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/dff_ram_4x72/runs/first_run/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/dff_ram_4x72/runs/first_run/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (1551.61 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    930 ( 45.3 %)   Cap = 12.5 ff ( 15.2 %)   Area =     8120.29 ( 46.9 %)   Delay =  2177.42 ps  ( 43.5 %)               
ABC: Path  0 --       3 : 0    4 pi                      A =   0.00  Df =  30.0  -16.9 ps  S =  47.2 ps  Cin =  0.0 ff  Cout =   8.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     829 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 432.7 -188.8 ps  S = 510.9 ps  Cin =  2.1 ff  Cout =  43.4 ff  Cmax = 130.0 ff  G = 1956  
ABC: Path  2 --     830 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1006.8 -400.0 ps  S = 670.8 ps  Cin =  2.1 ff  Cout =  57.7 ff  Cmax = 130.0 ff  G = 2593  
ABC: Path  3 --     831 : 6    2 sky130_fd_sc_hd__mux4_2 A =  22.52  Df =1560.8 -411.1 ps  S =  82.6 ps  Cin =  2.6 ff  Cout =   3.6 ff  Cmax = 301.2 ff  G =  130  
ABC: Path  4 --     832 : 3    4 sky130_fd_sc_hd__mux2_2 A =  11.26  Df =1721.5 -282.5 ps  S =  61.4 ps  Cin =  2.3 ff  Cout =   7.1 ff  Cmax = 297.6 ff  G =  300  
ABC: Path  5 --    1437 : 3    1 sky130_fd_sc_hd__mux2_2 A =  11.26  Df =1856.6 -160.2 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  6 --    1438 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =2177.4 -262.2 ps  S = 396.5 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi2 (\address [0]).  End-point = po222 ($auto$rtlil.cc:2669:MuxGate$1626).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  436/  360  lat =    0  nd =   930  edge =   2163  area =8118.31  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-pscBM5/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:       72
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      432
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      421
ABC RESULTS:        internal signals:      298
ABC RESULTS:           input signals:      436
ABC RESULTS:          output signals:      360
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram_4x72..
Removed 0 unused cells and 1094 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram_4x72...
Warning: Wire dff_ram_4x72.\rdata [71] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [70] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [69] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [68] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [67] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [66] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [65] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [64] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [63] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [62] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [61] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [60] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [59] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [58] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [57] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [56] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [55] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [54] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [53] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [52] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [51] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [50] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [49] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [48] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [47] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [46] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [45] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [44] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [43] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [42] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [41] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [40] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [39] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [38] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [37] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [36] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [35] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [34] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [33] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [32] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [31] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [30] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [29] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [28] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [27] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [26] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [25] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [24] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [23] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [22] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [21] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [20] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [19] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [18] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [17] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [16] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [15] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [14] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [13] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [12] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [11] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [10] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [9] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [8] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [7] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [6] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [5] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [4] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [3] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [2] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [1] is used but has no driver.
Warning: Wire dff_ram_4x72.\rdata [0] is used but has no driver.
Found and reported 72 problems.

61. Printing statistics.

=== dff_ram_4x72 ===

   Number of wires:               1224
   Number of wire bits:           1367
   Number of public wires:         294
   Number of public wire bits:     437
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1290
     sky130_fd_sc_hd__and3b_2        1
     sky130_fd_sc_hd__buf_1        421
     sky130_fd_sc_hd__dfxtp_2      360
     sky130_fd_sc_hd__mux2_2       432
     sky130_fd_sc_hd__mux4_2        72
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__nor3b_2        2

   Chip area for module '\dff_ram_4x72': 15777.632000

62. Executing Verilog backend.
Dumping module `\dff_ram_4x72'.

63. Executing JSON backend.

Warnings: 72 unique messages, 72 total
End of script. Logfile hash: 83db9097ef, CPU: user 1.14s system 0.06s, MEM: 32.04 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 69% 2x abc (2 sec), 7% 4x stat (0 sec), ...
